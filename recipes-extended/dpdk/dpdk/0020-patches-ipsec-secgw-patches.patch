From 9b4d12aa9114c0b3416008a5111077ddfc006968 Mon Sep 17 00:00:00 2001
From: michaelsh <michaelsh@marvell.com>
Date: Tue, 22 Jan 2019 18:09:15 +0200
Subject: [PATCH 20/30] patches: ipsec-secgw patches

Change-Id: I22ef4979c43b8ac2fde27a29be483a6c738f7a2b
Signed-off-by: michaelsh <michaelsh@marvell.com>
Reviewed-on: https://sj1git1.cavium.com/2535
Reviewed-by: Shlomi Gridish
Reviewed-by: Liron Himi
Tested-by: Liron Himi
---
 ...ples-ipsec-secgw-allow-secgw-to-run-on-7K.patch |  45 ++++++++
 ...sec-secgw-add-C-support-for-graceful-exit.patch | 125 +++++++++++++++++++++
 ...es-ipsec-secgw-add-mbufs-number-parameter.patch |  99 ++++++++++++++++
 ...ples-ipsec-secgw-add-rxds-and-txds-params.patch | 121 ++++++++++++++++++++
 4 files changed, 390 insertions(+)
 create mode 100644 patches/0001-examples-ipsec-secgw-allow-secgw-to-run-on-7K.patch
 create mode 100644 patches/0002-examples-ipsec-secgw-add-C-support-for-graceful-exit.patch
 create mode 100644 patches/0003-examples-ipsec-secgw-add-mbufs-number-parameter.patch
 create mode 100644 patches/0004-examples-ipsec-secgw-add-rxds-and-txds-params.patch

diff --git a/patches/0001-examples-ipsec-secgw-allow-secgw-to-run-on-7K.patch b/patches/0001-examples-ipsec-secgw-allow-secgw-to-run-on-7K.patch
new file mode 100644
index 0000000..9e58ad7
--- /dev/null
+++ b/patches/0001-examples-ipsec-secgw-allow-secgw-to-run-on-7K.patch
@@ -0,0 +1,45 @@
+From 12303fcc57c74ea7f4f45aca96b04fe8ac428a0d Mon Sep 17 00:00:00 2001
+From: michaelsh <michaelsh@marvell.com>
+Date: Sun, 13 Jan 2019 17:20:55 +0200
+Subject: [PATCH 1/4] examples: ipsec-secgw: allow secgw to run on 7K
+
+Use IP addresses 192.168.175.0 and 192.168.185.0
+to send bi-direction traffic with AES-128-CBC-HMAC-SHA1
+on back2back setup.
+
+Change-Id: I17c72157bd827c0cdea986302ab665c6da6b8992
+Signed-off-by: michaelsh <michaelsh@marvell.com>
+---
+ examples/ipsec-secgw/ep0.cfg | 2 +-
+ examples/ipsec-secgw/ep1.cfg | 2 +-
+ 2 files changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/examples/ipsec-secgw/ep0.cfg b/examples/ipsec-secgw/ep0.cfg
+index 299aa9e06..1e9b8b18a 100644
+--- a/examples/ipsec-secgw/ep0.cfg
++++ b/examples/ipsec-secgw/ep0.cfg
+@@ -141,7 +141,7 @@ rt ipv4 dst 192.168.115.0/24 port 2
+ rt ipv4 dst 192.168.116.0/24 port 3
+ rt ipv4 dst 192.168.65.0/24 port 2
+ rt ipv4 dst 192.168.66.0/24 port 3
+-rt ipv4 dst 192.168.185.0/24 port 2
++rt ipv4 dst 192.168.185.0/24 port 1
+ rt ipv4 dst 192.168.186.0/24 port 3
+ rt ipv4 dst 192.168.210.0/24 port 2
+ rt ipv4 dst 192.168.211.0/24 port 3
+diff --git a/examples/ipsec-secgw/ep1.cfg b/examples/ipsec-secgw/ep1.cfg
+index 3f6ff8111..394a00c8a 100644
+--- a/examples/ipsec-secgw/ep1.cfg
++++ b/examples/ipsec-secgw/ep1.cfg
+@@ -141,7 +141,7 @@ rt ipv4 dst 192.168.105.0/24 port 2
+ rt ipv4 dst 192.168.106.0/24 port 3
+ rt ipv4 dst 192.168.55.0/24 port 2
+ rt ipv4 dst 192.168.56.0/24 port 3
+-rt ipv4 dst 192.168.175.0/24 port 2
++rt ipv4 dst 192.168.175.0/24 port 1
+ rt ipv4 dst 192.168.176.0/24 port 3
+ rt ipv4 dst 192.168.200.0/24 port 2
+ rt ipv4 dst 192.168.201.0/24 port 3
+-- 
+2.15.1
+
diff --git a/patches/0002-examples-ipsec-secgw-add-C-support-for-graceful-exit.patch b/patches/0002-examples-ipsec-secgw-add-C-support-for-graceful-exit.patch
new file mode 100644
index 0000000..5aa4bcb
--- /dev/null
+++ b/patches/0002-examples-ipsec-secgw-add-C-support-for-graceful-exit.patch
@@ -0,0 +1,125 @@
+From fcd20c9184bdda3416eca0f53dc60950466e64ce Mon Sep 17 00:00:00 2001
+From: Dmitri Epshtein <dima@marvell.com>
+Date: Mon, 19 Mar 2018 18:51:25 +0200
+Subject: [PATCH 2/4] examples/ipsec-secgw: add ^C support for graceful exit
+
+- stop and close all ports
+- stop and close all crypto devices
+
+Change-Id: I88bc26676f869c18e60d21dc834ba2cb9a916410
+Signed-off-by: Dmitri Epshtein <dima@marvell.com>
+Reviewed-on: http://vgitil04.il.marvell.com:8080/52189
+Reviewed-by: Natalie Samsonov <nsamsono@marvell.com>
+(cherry picked from commit c75f3109f8c607c89f368461c496597e978b6d7c)
+Reviewed-on: http://vgitil04.il.marvell.com:8080/52329
+Tested-by: iSoC Platform CI <ykjenk@marvell.com>
+Reviewed-by: Yelena Krivosheev <yelena@marvell.com>
+---
+ examples/ipsec-secgw/ipsec-secgw.c | 41 ++++++++++++++++++++++++++++++++++++--
+ 1 file changed, 39 insertions(+), 2 deletions(-)
+
+diff --git a/examples/ipsec-secgw/ipsec-secgw.c b/examples/ipsec-secgw/ipsec-secgw.c
+index 1bc0b5b50..2c4bbc39f 100644
+--- a/examples/ipsec-secgw/ipsec-secgw.c
++++ b/examples/ipsec-secgw/ipsec-secgw.c
+@@ -13,8 +13,10 @@
+ #include <string.h>
+ #include <sys/queue.h>
+ #include <stdarg.h>
++#include <stdbool.h>
+ #include <errno.h>
+ #include <getopt.h>
++#include <signal.h>
+ 
+ #include <rte_common.h>
+ #include <rte_byteorder.h>
+@@ -144,6 +146,8 @@ static const struct option lgopts[] = {
+ 	{NULL, 0, 0, 0}
+ };
+ 
++static volatile bool force_quit;
++
+ /* mask of enabled ports */
+ static uint32_t enabled_port_mask;
+ static uint64_t enabled_cryptodev_mask = UINT64_MAX;
+@@ -228,6 +232,17 @@ struct ipsec_traffic {
+ 	struct traffic_type ip6;
+ };
+ 
++static void signal_handler(int signum)
++{
++	if (signum == SIGINT || signum == SIGTERM) {
++		printf("\n\nSignal %d received, preparing to exit...\n",
++				signum);
++		force_quit = true;
++		signal(SIGINT, SIG_DFL);
++		signal(SIGTERM, SIG_DFL);
++	}
++}
++
+ static inline void
+ prepare_one_packet(struct rte_mbuf *pkt, struct ipsec_traffic *t)
+ {
+@@ -841,7 +856,7 @@ main_loop(__attribute__((unused)) void *dummy)
+ 			lcore_id, portid, queueid);
+ 	}
+ 
+-	while (1) {
++	while (!force_quit) {
+ 		cur_tsc = rte_rdtsc();
+ 
+ 		/* TX queue buffer drain */
+@@ -863,6 +878,8 @@ main_loop(__attribute__((unused)) void *dummy)
+ 				process_pkts(qconf, pkts, nb_rx, portid);
+ 		}
+ 	}
++	printf("lcore_id #%d - Exit mainloop\n", lcore_id);
++	return 0;
+ }
+ 
+ static int32_t
+@@ -1746,7 +1763,7 @@ int32_t
+ main(int32_t argc, char **argv)
+ {
+ 	int32_t ret;
+-	uint32_t lcore_id;
++	uint32_t lcore_id, cdev_id;
+ 	uint8_t socket_id;
+ 	uint16_t portid;
+ 
+@@ -1834,6 +1851,10 @@ main(int32_t argc, char **argv)
+ 
+ 	check_all_ports_link_status(enabled_port_mask);
+ 
++	force_quit = false;
++	signal(SIGINT, signal_handler);
++	signal(SIGTERM, signal_handler);
++
+ 	/* launch per-lcore init on every lcore */
+ 	rte_eal_mp_remote_launch(main_loop, NULL, CALL_MASTER);
+ 	RTE_LCORE_FOREACH_SLAVE(lcore_id) {
+@@ -1841,5 +1862,21 @@ main(int32_t argc, char **argv)
+ 			return -1;
+ 	}
+ 
++	for (cdev_id = 0; cdev_id < rte_cryptodev_count(); cdev_id++) {
++		printf("Closing cryptodev %d...\n", cdev_id);
++		rte_cryptodev_stop(cdev_id);
++		rte_cryptodev_close(cdev_id);
++		printf(" Done\n");
++	}
++	for (portid = 0; portid < nb_ports; portid++) {
++		if ((enabled_port_mask & (1 << portid)) == 0)
++			continue;
++		printf("Closing port %d...\n", portid);
++		rte_eth_dev_stop(portid);
++		rte_eth_dev_close(portid);
++		printf(" Done\n");
++	+	}
++	+	printf("Bye...\n");
++
+ 	return 0;
+ }
+-- 
+2.15.1
+
diff --git a/patches/0003-examples-ipsec-secgw-add-mbufs-number-parameter.patch b/patches/0003-examples-ipsec-secgw-add-mbufs-number-parameter.patch
new file mode 100644
index 0000000..670050f
--- /dev/null
+++ b/patches/0003-examples-ipsec-secgw-add-mbufs-number-parameter.patch
@@ -0,0 +1,99 @@
+From 456a4ffd2b1e534b369881a4ed141ebe9fe114ab Mon Sep 17 00:00:00 2001
+From: Dmitri Epshtein <dima@marvell.com>
+Date: Wed, 21 Mar 2018 13:03:39 +0200
+Subject: [PATCH 3/4] examples/ipsec-secgw: add mbufs number parameter
+
+new parameter: -n NUM_MBUFS
+default number of mbufs: 2 * nb_rxd * nb_lcores * nb_ports
+
+Change-Id: I50e701b1008fcacc02c167398fcc0e6383b799ab
+Signed-off-by: Dmitri Epshtein <dima@marvell.com>
+Reviewed-on: http://vgitil04.il.marvell.com:8080/52334
+Tested-by: iSoC Platform CI <ykjenk@marvell.com>
+Reviewed-by: Natalie Samsonov <nsamsono@marvell.com>
+Reviewed-on: http://vgitil04.il.marvell.com:8080/52423
+---
+ examples/ipsec-secgw/ipsec-secgw.c | 25 +++++++++++++++++++++----
+ 1 file changed, 21 insertions(+), 4 deletions(-)
+
+diff --git a/examples/ipsec-secgw/ipsec-secgw.c b/examples/ipsec-secgw/ipsec-secgw.c
+index 2c4bbc39f..cf4d04051 100644
+--- a/examples/ipsec-secgw/ipsec-secgw.c
++++ b/examples/ipsec-secgw/ipsec-secgw.c
+@@ -53,7 +53,7 @@
+ 
+ #define MEMPOOL_CACHE_SIZE 256
+ 
+-#define NB_MBUF	(32000)
++static int32_t	nb_mbufs;
+ 
+ #define CDEV_QUEUE_DESC 2048
+ #define CDEV_MAP_ENTRIES 16384
+@@ -974,6 +974,7 @@ print_usage(const char *prgname)
+ 		"\n\n"
+ 		"  -p PORTMASK: Hexadecimal bitmask of ports to configure\n"
+ 		"  -P : Enable promiscuous mode\n"
++		"  -n NUM_MBUFS: Number of mbufs\n"
+ 		"  -u PORTMASK: Hexadecimal bitmask of unprotected ports\n"
+ 		"  -j FRAMESIZE: Enable jumbo frame with 'FRAMESIZE' as maximum\n"
+ 		"                packet size\n"
+@@ -1084,7 +1085,7 @@ parse_args(int32_t argc, char **argv)
+ 
+ 	argvopt = argv;
+ 
+-	while ((opt = getopt_long(argc, argvopt, "p:Pu:f:j:",
++	while ((opt = getopt_long(argc, argvopt, "p:Pu:f:j:n:",
+ 				lgopts, &option_index)) != EOF) {
+ 
+ 		switch (opt) {
+@@ -1108,6 +1109,14 @@ parse_args(int32_t argc, char **argv)
+ 				return -1;
+ 			}
+ 			break;
++		case 'n':
++			nb_mbufs = parse_decimal(optarg);
++			if (nb_mbufs == -1) {
++				printf("invalid number of mbufs\n");
++				print_usage(prgname);
++				return -1;
++			}
++			break;
+ 		case 'f':
+ 			if (f_present == 1) {
+ 				printf("\"-f\" option present more than "
+@@ -1701,7 +1710,8 @@ pool_init(struct socket_ctx *ctx, int32_t socket_id, uint32_t nb_mbuf)
+ 		rte_exit(EXIT_FAILURE, "Cannot init mbuf pool on socket %d\n",
+ 				socket_id);
+ 	else
+-		printf("Allocated mbuf pool on socket %d\n", socket_id);
++		printf("Allocated %d mbufs of %d bytes for %s\n",
++		+		nb_mbufs, buff_size, s);
+ }
+ 
+ static inline int
+@@ -1792,6 +1802,13 @@ main(int32_t argc, char **argv)
+ 		rte_exit(EXIT_FAILURE, "init_lcore_rx_queues failed\n");
+ 
+ 	nb_lcores = rte_lcore_count();
++	
++	/* Default number of mbufs is 2 * nb_rxd * nb_ports * nb_lcores */
++	if (!nb_mbufs)
++		nb_mbufs = 2 * nb_rxd * nb_ports * nb_lcores;
++	
++	printf("nb_lcores = %d, nb_ports = %d, nb_mbufs = %d\n",
++		nb_lcores, nb_ports, nb_mbufs);
+ 
+ 	/* Replicate each context per socket */
+ 	for (lcore_id = 0; lcore_id < RTE_MAX_LCORE; lcore_id++) {
+@@ -1814,7 +1831,7 @@ main(int32_t argc, char **argv)
+ 
+ 		rt_init(&socket_ctx[socket_id], socket_id);
+ 
+-		pool_init(&socket_ctx[socket_id], socket_id, NB_MBUF);
++		pool_init(&socket_ctx[socket_id], socket_id, nb_mbufs);
+ 	}
+ 
+ 	RTE_ETH_FOREACH_DEV(portid) {
+-- 
+2.15.1
+
diff --git a/patches/0004-examples-ipsec-secgw-add-rxds-and-txds-params.patch b/patches/0004-examples-ipsec-secgw-add-rxds-and-txds-params.patch
new file mode 100644
index 0000000..9bbbc85
--- /dev/null
+++ b/patches/0004-examples-ipsec-secgw-add-rxds-and-txds-params.patch
@@ -0,0 +1,121 @@
+From 3edcfca4af07f82df09142b83661f0fbb2801bf4 Mon Sep 17 00:00:00 2001
+From: Dmitri Epshtein <dima@marvell.com>
+Date: Thu, 22 Mar 2018 16:56:07 +0200
+Subject: [PATCH 4/4] examples/ipsec-secgw: add rxds and txds params
+
+New parameters:
+"-r NUM_RXD" - Number of descripotrs in receive queue
+"-t NUM_TXD" - Number of descriptors in transmit queue
+
+Change-Id: I5b21599af2a4d72e2d173c576c2cad8039f50e63
+Signed-off-by: Dmitri Epshtein <dima@marvell.com>
+Reviewed-on: http://vgitil04.il.marvell.com:8080/52801
+Tested-by: iSoC Platform CI <ykjenk@marvell.com>
+---
+ examples/ipsec-secgw/ipsec-secgw.c | 39 ++++++++++++++++++++++++++++++--------
+ 1 file changed, 31 insertions(+), 8 deletions(-)
+
+diff --git a/examples/ipsec-secgw/ipsec-secgw.c b/examples/ipsec-secgw/ipsec-secgw.c
+index cf4d04051..07fe98d7f 100644
+--- a/examples/ipsec-secgw/ipsec-secgw.c
++++ b/examples/ipsec-secgw/ipsec-secgw.c
+@@ -77,7 +77,7 @@ static int32_t	nb_mbufs;
+ /*
+  * Configurable number of RX/TX ring descriptors
+  */
+-#define IPSEC_SECGW_RX_DESC_DEFAULT 1024
++#define IPSEC_SECGW_RX_DESC_DEFAULT 512
+ #define IPSEC_SECGW_TX_DESC_DEFAULT 1024
+ static uint16_t nb_rxd = IPSEC_SECGW_RX_DESC_DEFAULT;
+ static uint16_t nb_txd = IPSEC_SECGW_TX_DESC_DEFAULT;
+@@ -155,6 +155,7 @@ static uint32_t unprotected_port_mask;
+ static int32_t promiscuous_on = 1;
+ static int32_t numa_on = 1; /**< NUMA is enabled by default. */
+ static uint32_t nb_lcores;
++static uint32_t nb_ports;
+ static uint32_t single_sa;
+ static uint32_t single_sa_idx;
+ static uint32_t frame_size;
+@@ -975,6 +976,8 @@ print_usage(const char *prgname)
+ 		"  -p PORTMASK: Hexadecimal bitmask of ports to configure\n"
+ 		"  -P : Enable promiscuous mode\n"
+ 		"  -n NUM_MBUFS: Number of mbufs\n"
++		"  -r NUM_RXD: Number of descripotrs in receive queue\n"
++		"  -t NUM_TXD: Number of descriptors in transmit queue\n"
+ 		"  -u PORTMASK: Hexadecimal bitmask of unprotected ports\n"
+ 		"  -j FRAMESIZE: Enable jumbo frame with 'FRAMESIZE' as maximum\n"
+ 		"                packet size\n"
+@@ -1079,13 +1082,13 @@ parse_args(int32_t argc, char **argv)
+ {
+ 	int32_t opt, ret;
+ 	char **argvopt;
+-	int32_t option_index;
++	int32_t option_index, rxds, txds;
+ 	char *prgname = argv[0];
+ 	int32_t f_present = 0;
+ 
+ 	argvopt = argv;
+ 
+-	while ((opt = getopt_long(argc, argvopt, "p:Pu:f:j:n:",
++	while ((opt = getopt_long(argc, argvopt, "p:Pu:f:j:n:r:t:",
+ 				lgopts, &option_index)) != EOF) {
+ 
+ 		switch (opt) {
+@@ -1117,6 +1120,24 @@ parse_args(int32_t argc, char **argv)
+ 				return -1;
+ 			}
+ 			break;
++		case 'r':
++			rxds = parse_decimal(optarg);
++			if (rxds == -1) {
++				printf("invalid number of rxds\n");
++				print_usage(prgname);
++				return -1;
++			}
++			nb_rxd = (uint16_t)rxds;
++			break;
++		case 't':
++			txds = parse_decimal(optarg);
++			if (txds == -1) {
++				printf("invalid number of txds\n");
++				print_usage(prgname);
++				return -1;
++			}
++			nb_txd = (uint16_t)txds;
++			break;
+ 		case 'f':
+ 			if (f_present == 1) {
+ 				printf("\"-f\" option present more than "
+@@ -1802,13 +1823,15 @@ main(int32_t argc, char **argv)
+ 		rte_exit(EXIT_FAILURE, "init_lcore_rx_queues failed\n");
+ 
+ 	nb_lcores = rte_lcore_count();
+-	
++
++	nb_ports = rte_eth_dev_count_avail();
++
+ 	/* Default number of mbufs is 2 * nb_rxd * nb_ports * nb_lcores */
+ 	if (!nb_mbufs)
+ 		nb_mbufs = 2 * nb_rxd * nb_ports * nb_lcores;
+ 	
+-	printf("nb_lcores = %d, nb_ports = %d, nb_mbufs = %d\n",
+-		nb_lcores, nb_ports, nb_mbufs);
++	printf("nb_lcores=%d, nb_ports=%d, nb_rxd=%d, nb_txd=%d, nb_mbufs=%d\n",
++		nb_lcores, nb_ports, nb_rxd, nb_txd, nb_mbufs);
+ 
+ 	/* Replicate each context per socket */
+ 	for (lcore_id = 0; lcore_id < RTE_MAX_LCORE; lcore_id++) {
+@@ -1892,8 +1915,8 @@ main(int32_t argc, char **argv)
+ 		rte_eth_dev_stop(portid);
+ 		rte_eth_dev_close(portid);
+ 		printf(" Done\n");
+-	+	}
+-	+	printf("Bye...\n");
++	}
++	printf("Bye...\n");
+ 
+ 	return 0;
+ }
+-- 
+2.15.1
+
-- 
2.7.4

