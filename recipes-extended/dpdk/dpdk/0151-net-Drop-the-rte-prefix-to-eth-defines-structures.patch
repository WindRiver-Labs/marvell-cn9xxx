From d4248e3a271240d895a9638b4493e570e79e7d39 Mon Sep 17 00:00:00 2001
From: Kevin Hao <kexin.hao@windriver.com>
Date: Mon, 15 Jul 2019 22:03:37 +0800
Subject: [PATCH 151/154] net: Drop the rte prefix to eth defines&structures

The new version of the DPDK add rte prefix to eth defines
and structures. But for the current version (v18.11.1), the old API
is still used, so we need to drop the rte prefix after applying
the patches from the latest DPDK.

Signed-off-by: Kevin Hao <kexin.hao@windriver.com>
---
 drivers/common/octeontx2/otx2_mbox.h    | 10 +++++-----
 drivers/net/octeontx2/otx2_ethdev.c     | 16 ++++++++--------
 drivers/net/octeontx2/otx2_ethdev.h     | 14 +++++++-------
 drivers/net/octeontx2/otx2_ethdev_ops.c |  6 +++---
 drivers/net/octeontx2/otx2_mac.c        | 16 ++++++++--------
 drivers/net/octeontx2/otx2_vlan.c       |  6 +++---
 lib/librte_net/rte_ether.c              | 12 ++++++------
 lib/librte_net/rte_ether.h              |  6 +++---
 8 files changed, 43 insertions(+), 43 deletions(-)

diff --git a/drivers/common/octeontx2/otx2_mbox.h b/drivers/common/octeontx2/otx2_mbox.h
index c0bb676b25a4..a18e11f1116c 100644
--- a/drivers/common/octeontx2/otx2_mbox.h
+++ b/drivers/common/octeontx2/otx2_mbox.h
@@ -401,7 +401,7 @@ struct cgx_stats_rsp {
  */
 struct cgx_mac_addr_set_or_get {
 	struct mbox_msghdr hdr;
-	uint8_t __otx2_io mac_addr[RTE_ETHER_ADDR_LEN];
+	uint8_t __otx2_io mac_addr[ETHER_ADDR_LEN];
 };
 
 /* Structure for requesting the operation to
@@ -409,7 +409,7 @@ struct cgx_mac_addr_set_or_get {
  */
 struct cgx_mac_addr_add_req {
 	struct mbox_msghdr hdr;
-	uint8_t __otx2_io mac_addr[RTE_ETHER_ADDR_LEN];
+	uint8_t __otx2_io mac_addr[ETHER_ADDR_LEN];
 };
 
 /* Structure for response against the operation to
@@ -633,7 +633,7 @@ struct nix_lf_alloc_rsp {
 	uint8_t __otx2_io tx_chan_cnt; /* Total number of TX channels */
 	uint8_t __otx2_io lso_tsov4_idx;
 	uint8_t __otx2_io lso_tsov6_idx;
-	uint8_t __otx2_io mac_addr[RTE_ETHER_ADDR_LEN];
+	uint8_t __otx2_io mac_addr[ETHER_ADDR_LEN];
 	uint8_t __otx2_io lf_rx_stats; /* NIX_AF_CONST1::LF_RX_STATS */
 	uint8_t __otx2_io lf_tx_stats; /* NIX_AF_CONST1::LF_TX_STATS */
 	uint16_t __otx2_io cints; /* NIX_AF_CONST2::CINTS */
@@ -843,12 +843,12 @@ struct nix_rss_flowkey_cfg_rsp {
 
 struct nix_set_mac_addr {
 	struct mbox_msghdr hdr;
-	uint8_t __otx2_io mac_addr[RTE_ETHER_ADDR_LEN];
+	uint8_t __otx2_io mac_addr[ETHER_ADDR_LEN];
 };
 
 struct nix_get_mac_addr_rsp {
 	struct mbox_msghdr hdr;
-	uint8_t __otx2_io mac_addr[RTE_ETHER_ADDR_LEN];
+	uint8_t __otx2_io mac_addr[ETHER_ADDR_LEN];
 };
 
 struct nix_mark_format_cfg {
diff --git a/drivers/net/octeontx2/otx2_ethdev.c b/drivers/net/octeontx2/otx2_ethdev.c
index 156e7d34f809..25ad135b9d11 100644
--- a/drivers/net/octeontx2/otx2_ethdev.c
+++ b/drivers/net/octeontx2/otx2_ethdev.c
@@ -1175,8 +1175,8 @@ otx2_nix_configure(struct rte_eth_dev *eth_dev)
 	struct rte_eth_conf *conf = &data->dev_conf;
 	struct rte_eth_rxmode *rxmode = &conf->rxmode;
 	struct rte_eth_txmode *txmode = &conf->txmode;
-	char ea_fmt[RTE_ETHER_ADDR_FMT_SIZE];
-	struct rte_ether_addr *ea;
+	char ea_fmt[ETHER_ADDR_FMT_SIZE];
+	struct ether_addr *ea;
 	uint8_t nb_rxq, nb_txq;
 	int rc;
 
@@ -1343,11 +1343,11 @@ otx2_nix_configure(struct rte_eth_dev *eth_dev)
 
 	/* Update the mac address */
 	ea = eth_dev->data->mac_addrs;
-	memcpy(ea, dev->mac_addr, RTE_ETHER_ADDR_LEN);
-	if (rte_is_zero_ether_addr(ea))
-		rte_eth_random_addr((uint8_t *)ea);
+	memcpy(ea, dev->mac_addr, ETHER_ADDR_LEN);
+	if (is_zero_ether_addr(ea))
+		eth_random_addr((uint8_t *)ea);
 
-	rte_ether_format_addr(ea_fmt, RTE_ETHER_ADDR_FMT_SIZE, ea);
+	ether_format_addr(ea_fmt, ETHER_ADDR_FMT_SIZE, ea);
 
 	otx2_nix_dbg("Configured port%d mac=%s nb_rxq=%d nb_txq=%d"
 		" rx_offloads=0x%" PRIx64 " tx_offloads=0x%" PRIx64 ""
@@ -1762,7 +1762,7 @@ otx2_eth_dev_init(struct rte_eth_dev *eth_dev)
 		max_entries = 1;
 
 	eth_dev->data->mac_addrs = rte_zmalloc("mac_addr", max_entries *
-					       RTE_ETHER_ADDR_LEN, 0);
+					       ETHER_ADDR_LEN, 0);
 	if (eth_dev->data->mac_addrs == NULL) {
 		otx2_err("Failed to allocate memory for mac addr");
 		rc = -ENOMEM;
@@ -1776,7 +1776,7 @@ otx2_eth_dev_init(struct rte_eth_dev *eth_dev)
 		goto free_mac_addrs;
 
 	/* Update the mac address */
-	memcpy(eth_dev->data->mac_addrs, dev->mac_addr, RTE_ETHER_ADDR_LEN);
+	memcpy(eth_dev->data->mac_addrs, dev->mac_addr, ETHER_ADDR_LEN);
 
 	/* Also sync same MAC address to CGX table */
 	otx2_cgx_mac_addr_set(eth_dev, &eth_dev->data->mac_addrs[0]);
diff --git a/drivers/net/octeontx2/otx2_ethdev.h b/drivers/net/octeontx2/otx2_ethdev.h
index 863d4877ffd9..81111ba964ce 100644
--- a/drivers/net/octeontx2/otx2_ethdev.h
+++ b/drivers/net/octeontx2/otx2_ethdev.h
@@ -48,7 +48,7 @@
 
 /* ETH_HLEN+ETH_FCS+2*VLAN_HLEN */
 #define NIX_L2_OVERHEAD \
-	(RTE_ETHER_HDR_LEN + RTE_ETHER_CRC_LEN + 8)
+	(ETHER_HDR_LEN + ETHER_CRC_LEN + 8)
 
 /* HW config of frame size doesn't include FCS */
 #define NIX_MAX_HW_FRS			9212
@@ -56,10 +56,10 @@
 
 /* Since HW FRS includes NPC VTAG insertion space, user has reduced FRS */
 #define NIX_MAX_FRS	\
-	(NIX_MAX_HW_FRS + RTE_ETHER_CRC_LEN - NIX_MAX_VTAG_ACT_SIZE)
+	(NIX_MAX_HW_FRS + ETHER_CRC_LEN - NIX_MAX_VTAG_ACT_SIZE)
 
 #define NIX_MIN_FRS	\
-	(NIX_MIN_HW_FRS + RTE_ETHER_CRC_LEN)
+	(NIX_MIN_HW_FRS + ETHER_CRC_LEN)
 
 #define NIX_MAX_MTU	\
 	(NIX_MAX_FRS - NIX_L2_OVERHEAD)
@@ -245,7 +245,7 @@ struct otx2_eth_dev {
 	uint8_t tx_chan_cnt;
 	uint8_t lso_tsov4_idx;
 	uint8_t lso_tsov6_idx;
-	uint8_t mac_addr[RTE_ETHER_ADDR_LEN];
+	uint8_t mac_addr[ETHER_ADDR_LEN];
 	uint8_t mkex_pfl_name[MKEX_NAME_LEN];
 	uint8_t max_mac_entries;
 	uint8_t lf_tx_stats;
@@ -462,7 +462,7 @@ int otx2_nix_rss_hash_conf_get(struct rte_eth_dev *eth_dev,
 int otx2_cgx_rxtx_start(struct otx2_eth_dev *dev);
 int otx2_cgx_rxtx_stop(struct otx2_eth_dev *dev);
 int otx2_cgx_mac_addr_set(struct rte_eth_dev *eth_dev,
-			  struct rte_ether_addr *addr);
+			  struct ether_addr *addr);
 
 /* Flow Control */
 int otx2_nix_flow_ctrl_get(struct rte_eth_dev *eth_dev,
@@ -496,10 +496,10 @@ const uint32_t *otx2_nix_supported_ptypes_get(struct rte_eth_dev *dev);
 
 /* Mac address handling */
 int otx2_nix_mac_addr_set(struct rte_eth_dev *eth_dev,
-			  struct rte_ether_addr *addr);
+			  struct ether_addr *addr);
 int otx2_nix_mac_addr_get(struct rte_eth_dev *eth_dev, uint8_t *addr);
 int otx2_nix_mac_addr_add(struct rte_eth_dev *eth_dev,
-			  struct rte_ether_addr *addr,
+			  struct ether_addr *addr,
 			  uint32_t index, uint32_t pool);
 void otx2_nix_mac_addr_del(struct rte_eth_dev *eth_dev, uint32_t index);
 int otx2_cgx_mac_max_entries_get(struct otx2_eth_dev *dev);
diff --git a/drivers/net/octeontx2/otx2_ethdev_ops.c b/drivers/net/octeontx2/otx2_ethdev_ops.c
index 5a16a3c04d93..5ea1878a790e 100644
--- a/drivers/net/octeontx2/otx2_ethdev_ops.c
+++ b/drivers/net/octeontx2/otx2_ethdev_ops.c
@@ -37,7 +37,7 @@ otx2_nix_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
 	req = otx2_mbox_alloc_msg_nix_set_hw_frs(mbox);
 	req->update_smq = true;
 	/* FRS HW config should exclude FCS but include NPC VTAG insert size */
-	req->maxlen = frame_size - RTE_ETHER_CRC_LEN + NIX_MAX_VTAG_ACT_SIZE;
+	req->maxlen = frame_size - ETHER_CRC_LEN + NIX_MAX_VTAG_ACT_SIZE;
 
 	rc = otx2_mbox_process(mbox);
 	if (rc)
@@ -45,13 +45,13 @@ otx2_nix_mtu_set(struct rte_eth_dev *eth_dev, uint16_t mtu)
 
 	/* Now just update Rx MAXLEN */
 	req = otx2_mbox_alloc_msg_nix_set_hw_frs(mbox);
-	req->maxlen = frame_size - RTE_ETHER_CRC_LEN;
+	req->maxlen = frame_size - ETHER_CRC_LEN;
 
 	rc = otx2_mbox_process(mbox);
 	if (rc)
 		return rc;
 
-	if (frame_size > RTE_ETHER_MAX_LEN)
+	if (frame_size > ETHER_MAX_LEN)
 		dev->rx_offloads |= DEV_RX_OFFLOAD_JUMBO_FRAME;
 	else
 		dev->rx_offloads &= ~DEV_RX_OFFLOAD_JUMBO_FRAME;
diff --git a/drivers/net/octeontx2/otx2_mac.c b/drivers/net/octeontx2/otx2_mac.c
index b4bcc61f87de..5f6afcf4f913 100644
--- a/drivers/net/octeontx2/otx2_mac.c
+++ b/drivers/net/octeontx2/otx2_mac.c
@@ -8,7 +8,7 @@
 #include "otx2_ethdev.h"
 
 int
-otx2_cgx_mac_addr_set(struct rte_eth_dev *eth_dev, struct rte_ether_addr *addr)
+otx2_cgx_mac_addr_set(struct rte_eth_dev *eth_dev, struct ether_addr *addr)
 {
 	struct otx2_eth_dev *dev = otx2_eth_pmd_priv(eth_dev);
 	struct cgx_mac_addr_set_or_get *req;
@@ -22,7 +22,7 @@ otx2_cgx_mac_addr_set(struct rte_eth_dev *eth_dev, struct rte_ether_addr *addr)
 		return -ENOTSUP;
 
 	req = otx2_mbox_alloc_msg_cgx_mac_addr_set(mbox);
-	otx2_mbox_memcpy(req->mac_addr, addr->addr_bytes, RTE_ETHER_ADDR_LEN);
+	otx2_mbox_memcpy(req->mac_addr, addr->addr_bytes, ETHER_ADDR_LEN);
 
 	rc = otx2_mbox_process(mbox);
 	if (rc)
@@ -50,7 +50,7 @@ otx2_cgx_mac_max_entries_get(struct otx2_eth_dev *dev)
 }
 
 int
-otx2_nix_mac_addr_add(struct rte_eth_dev *eth_dev, struct rte_ether_addr *addr,
+otx2_nix_mac_addr_add(struct rte_eth_dev *eth_dev, struct ether_addr *addr,
 		      uint32_t index __rte_unused, uint32_t pool __rte_unused)
 {
 	struct otx2_eth_dev *dev = otx2_eth_pmd_priv(eth_dev);
@@ -66,7 +66,7 @@ otx2_nix_mac_addr_add(struct rte_eth_dev *eth_dev, struct rte_ether_addr *addr,
 		return -ENOTSUP;
 
 	req = otx2_mbox_alloc_msg_cgx_mac_addr_add(mbox);
-	otx2_mbox_memcpy(req->mac_addr, addr->addr_bytes, RTE_ETHER_ADDR_LEN);
+	otx2_mbox_memcpy(req->mac_addr, addr->addr_bytes, ETHER_ADDR_LEN);
 
 	rc = otx2_mbox_process_msg(mbox, (void *)&rsp);
 	if (rc) {
@@ -101,7 +101,7 @@ otx2_nix_mac_addr_del(struct rte_eth_dev *eth_dev, uint32_t index)
 }
 
 int
-otx2_nix_mac_addr_set(struct rte_eth_dev *eth_dev, struct rte_ether_addr *addr)
+otx2_nix_mac_addr_set(struct rte_eth_dev *eth_dev, struct ether_addr *addr)
 {
 	struct otx2_eth_dev *dev = otx2_eth_pmd_priv(eth_dev);
 	struct otx2_mbox *mbox = dev->mbox;
@@ -109,7 +109,7 @@ otx2_nix_mac_addr_set(struct rte_eth_dev *eth_dev, struct rte_ether_addr *addr)
 	int rc;
 
 	req = otx2_mbox_alloc_msg_nix_set_mac_addr(mbox);
-	otx2_mbox_memcpy(req->mac_addr, addr->addr_bytes, RTE_ETHER_ADDR_LEN);
+	otx2_mbox_memcpy(req->mac_addr, addr->addr_bytes, ETHER_ADDR_LEN);
 
 	rc = otx2_mbox_process(mbox);
 	if (rc) {
@@ -117,7 +117,7 @@ otx2_nix_mac_addr_set(struct rte_eth_dev *eth_dev, struct rte_ether_addr *addr)
 		goto done;
 	}
 
-	otx2_mbox_memcpy(dev->mac_addr, addr->addr_bytes, RTE_ETHER_ADDR_LEN);
+	otx2_mbox_memcpy(dev->mac_addr, addr->addr_bytes, ETHER_ADDR_LEN);
 
 	/* Install the same entry into CGX DMAC filter table too. */
 	otx2_cgx_mac_addr_set(eth_dev, addr);
@@ -142,7 +142,7 @@ otx2_nix_mac_addr_get(struct rte_eth_dev *eth_dev, uint8_t *addr)
 		goto done;
 	}
 
-	otx2_mbox_memcpy(addr, rsp->mac_addr, RTE_ETHER_ADDR_LEN);
+	otx2_mbox_memcpy(addr, rsp->mac_addr, ETHER_ADDR_LEN);
 
 done:
 	return rc;
diff --git a/drivers/net/octeontx2/otx2_vlan.c b/drivers/net/octeontx2/otx2_vlan.c
index 189c45174efa..0d8860c8c847 100644
--- a/drivers/net/octeontx2/otx2_vlan.c
+++ b/drivers/net/octeontx2/otx2_vlan.c
@@ -235,7 +235,7 @@ nix_vlan_update_mac(struct rte_eth_dev *eth_dev, int mcam_index,
 	} else {
 		mcam_data = 0ULL;
 		mac_addr = dev->mac_addr;
-		for (idx = RTE_ETHER_ADDR_LEN - 1; idx >= 0; idx--)
+		for (idx = ETHER_ADDR_LEN - 1; idx >= 0; idx--)
 			mcam_data |= ((uint64_t)*mac_addr++) << (8 * idx);
 
 		mcam_mask = BIT_ULL(48) - 1;
@@ -329,7 +329,7 @@ nix_vlan_mcam_config(struct rte_eth_dev *eth_dev,
 	if (flags & MAC_ADDR_MATCH) {
 		mcam_data = 0ULL;
 		mac_addr = dev->mac_addr;
-		for (idx = RTE_ETHER_ADDR_LEN - 1; idx >= 0; idx--)
+		for (idx = ETHER_ADDR_LEN - 1; idx >= 0; idx--)
 			mcam_data |= ((uint64_t)*mac_addr++) << (8 * idx);
 
 		mcam_mask = BIT_ULL(48) - 1;
@@ -841,7 +841,7 @@ otx2_nix_vlan_pvid_set(struct rte_eth_dev *dev,       uint16_t vlan_id, int on)
 				(vlan->outer_vlan_tpid << 16) | vlan_id;
 		else
 			vtag_cfg->tx.vtag0 =
-				((RTE_ETHER_TYPE_VLAN << 16) | vlan_id);
+				((ETHER_TYPE_VLAN << 16) | vlan_id);
 		vtag_cfg->tx.cfg_vtag0 = 1;
 	} else {
 		vtag_cfg->cfg_type = VTAG_TX;
diff --git a/lib/librte_net/rte_ether.c b/lib/librte_net/rte_ether.c
index 974fe815b335..5839214f6c12 100644
--- a/lib/librte_net/rte_ether.c
+++ b/lib/librte_net/rte_ether.c
@@ -5,19 +5,19 @@
 #include <rte_ether.h>
 
 void
-rte_eth_random_addr(uint8_t *addr)
+eth_random_addr(uint8_t *addr)
 {
 	uint64_t rand = rte_rand();
 	uint8_t *p = (uint8_t *)&rand;
 
-	rte_memcpy(addr, p, RTE_ETHER_ADDR_LEN);
-	addr[0] &= (uint8_t)~RTE_ETHER_GROUP_ADDR;	/* clear multicast bit */
-	addr[0] |= RTE_ETHER_LOCAL_ADMIN_ADDR;	/* set local assignment bit */
+	rte_memcpy(addr, p, ETHER_ADDR_LEN);
+	addr[0] &= (uint8_t)~ETHER_GROUP_ADDR;	/* clear multicast bit */
+	addr[0] |= ETHER_LOCAL_ADMIN_ADDR;	/* set local assignment bit */
 }
 
 void
-rte_ether_format_addr(char *buf, uint16_t size,
-		      const struct rte_ether_addr *eth_addr)
+ether_format_addr(char *buf, uint16_t size,
+		      const struct ether_addr *eth_addr)
 {
 	snprintf(buf, size, "%02X:%02X:%02X:%02X:%02X:%02X",
 		 eth_addr->addr_bytes[0],
diff --git a/lib/librte_net/rte_ether.h b/lib/librte_net/rte_ether.h
index 82ce9da3e9d1..4a117bd3e659 100644
--- a/lib/librte_net/rte_ether.h
+++ b/lib/librte_net/rte_ether.h
@@ -205,7 +205,7 @@ static inline int is_valid_assigned_ether_addr(const struct ether_addr *ea)
  *   A pointer to Ethernet address.
  */
 void
-rte_eth_random_addr(uint8_t *addr);
+eth_random_addr(uint8_t *addr);
 
 /**
  * Fast copy an Ethernet address.
@@ -245,8 +245,8 @@ static inline void ether_addr_copy(const struct ether_addr *ea_from,
  *   A pointer to a ether_addr structure.
  */
 void
-rte_ether_format_addr(char *buf, uint16_t size,
-		      const struct rte_ether_addr *eth_addr);
+ether_format_addr(char *buf, uint16_t size,
+		      const struct ether_addr *eth_addr);
 /**
  * Ethernet header: Contains the destination address, source address
  * and frame type.
-- 
2.14.4

